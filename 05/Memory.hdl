// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // We have to watch the most significant bit.
    // When it's 0 we have a 14 bits address and we can
    // feed it right into our RAM16K. Otherwise, we're
    // accessing one of the two maps.
    DMux(in=load, sel=address[14], a=loadRAM, b=loadIO);
    
    RAM16K(in=in, load=loadRAM, address=address[0..13], out=outRAM);

    // How to direct the loadIO correctly? We use the second
    // MSB: given that the first one is already 1 and so we
    // have a base address of 16384, if the second MSB is 1
    // we are referring to 2^14 + 2^13 = 16384 + 8192 = 24576

    DMux(in=loadIO, sel=address[13], a=loadScreen, b=loadKeyboard);
    
    // Screen map is a RAM8K
    Screen(in=in, load=loadScreen, address=address[0..12], out=outScreen);

    // Keyboard map is an unique register
    Keyboard(out=outKeyboard);

    // Gather the IO output
    Mux16(a=outScreen, b=outKeyboard, sel=address[13], out=outIO);

    // Finally, select if to output RAM or IO
    Mux16(a=outRAM, b=outIO, sel=address[14], out=out);
}